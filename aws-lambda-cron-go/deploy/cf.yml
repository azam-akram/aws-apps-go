---
AWSTemplateFormatVersion: "2010-09-09"
Description: "A CF template to create a lambda functions and clouwatch cron job"
Parameters:
  pLambdaCodeBucket:
    Type: "String"
  pLambdaCodeS3KeyPath:
    Type: "String"
Resources:
  lfnLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
          Action: "sts:AssumeRole"
      Policies:
      - PolicyName: "lambdaCloudWatchPolicy"
        PolicyDocument:
          Statement:
          - Effect: "Allow"
            Action:
            - "logs:CreateLogGroup"
            - "logs:CreateLogStream"
            - "logs:PutLogEvents"
            Resource: "*"
  cwEventRuleLmabdaInvoke:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Cloud watch event rule to invoke lambda function"
      State: "ENABLED"
      ScheduleExpression: "rate(1 minute)"
      Targets:
      - Arn:
          Fn::GetAtt:
          - "lfnScheduleEventLambda"
          - "Arn"
        Id: "event_rule_schedule_lambda"
        Input: "{\"source\":\"cloud watch\", \"action\":\"invoke lambda\"}"
  cwEventPermInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Ref: "lfnScheduleEventLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
        - "cwEventRuleLmabdaInvoke"
        - "Arn"
  lfnScheduleEventLambda:
    Type: "AWS::Lambda::Function"
    DependsOn:
    - "lfnLambdaRole"
    Properties:
      Architectures:
      - "x86_64"
      Runtime: "go1.x"
      Handler: "main"
      Code:
        S3Bucket:
          Ref: "pLambdaCodeBucket"
        S3Key:
          Ref: "pLambdaCodeS3KeyPath"
      Description: "This lambda function triggered by a cron job"
      FunctionName: "cron-job-function"
      Role:
        Fn::Sub: "${lfnLambdaRole.Arn}"
      Timeout: "120"